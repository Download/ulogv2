!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){var r=e.exports=n(2),o=r.ext;r.ext=function(e){if(e)for(var t in e!==r&&o(e),r.mods)r.mods[t].ext&&r.mods[t].ext(e);else for(e in r.ext(r),r())r.ext(r()[e]);return e},r.add=function(e,t){for(var n in t)(r[e]||(r[e]={}))[n]=t[n];r.ext()}},function(e,t,n){var r=e.exports=n(0);function o(e){return"level"==e?"log":"debug"==e?"debug":"log_"+e}r.env={get:function(e){try{return localStorage.getItem(o(e))}catch(e){}},set:function(e,t){try{void 0===t?localStorage.removeItem(o(e)):localStorage.setItem(o(e),t)}catch(e){}}},r.add("mods",{options:n(3),levels:n(4),assert:n(5)})},function(module,exports){var m=Object.create(null),a=function(e,t){return e?m[e]||(m[e]=a.ext(a.new(e,t))):m};a.levels={error:1,warn:2,info:3,log:4,debug:5,trace:6},a.new=function(n,c,r){return eval("r={'"+n+"':function(){a.log(n,[].slice.call(arguments))}}[n]"),r.name?r:Object.defineProperty(r,"name",{get:function(){return n}})},a.log=function(e,t){m[e][t.length>1&&a.levels[t[0]]?t.shift():"log"].apply(m[e],t)},a.ext=function(e,t){for(v in t="undefined"!=typeof console&&console,a.levels)e[v]=t&&(t[v]||t.log)||function(){};return e},module.exports=a},function(e,t,n){var r=n(0),o={};r.set=function(e,t,n){for(m in o[e]=t,n&&r.env.set&&r.env.set(e,t),r.mods)r.mods[m].set&&r.mods[m].set(e,t,n);r.ext()},r.get=function(e,t){if(!e)return o;if(void 0===t)return o[e];var n=o[e]?o[e].parsed||(o[e].parsed=r.parseOption(e,o[e])):[],i={};if(void 0!==(i=o[e]?o[e].cached||(o[e].cached=i):i)[t])return i[t];for(m in i[t]=r.evalOption(n,t),r.mods)r.mods[m].get&&r.mods[m].get(i[t]);return i[t]},r.load=function(e){if(e)r.set(e,r.env.get(e));else for(e in r.options)r.load(e)},r.enable=r.set.bind(this,"debug"),r.disable=r.set.bind(this,"debug",""),r.enabled=r.get.bind(this,"debug"),r.parseOption=function(e,t){for(var n,o,i=[],u="debug"==e,l=(t||"").split(/(?<!\\);/).map(function(e){return e.replace("\\;",";")}),a=[],s=0;n=l[s];s++){var f=-1==(o=n.indexOf("="))?[n.trim()]:[n.substring(0,o).trim(),n.substring(o+1).trim()],c=f[1]||u?f[0].split(/[\s,]+/):[],d={value:f[1]||!u&&f[0]||u&&r.levels.debug,incl:[],excl:[]};c.length?i.push(d):(c.push("*"),a.push(d));for(var p,v=0;p=c[v];v++)d["-"==(p=p.replace(/\*/g,".*?"))[0]?"excl":"incl"].push(new RegExp("^"+p.substr("-"==p[0]?1:0)+"$"))}return i.push.apply(i,a),i},r.evalOption=function(e,t){for(var n,r=0;n=e[r];r++){for(var o,i=0;o=n.excl[i];i++)if(o.test(t))continue;var u;for(i=0;u=n.incl[i];i++)if(u.test(t))return n.value}},r.createOption=function(e,t){var n,o={configurable:!0},i=r.options[t];return o.get=function(o){return o=void 0!==n?n:r.get(t,e===r?"":e.name),o=i&&i.fromString?i.fromString(o):o,o=i&&i.get?i.get(e,o):o},e!==r&&(o.set=function(e){e=i&&i.set?i.set(e):e,e=i&&i.toString?i.toString(e):e,n=e}),Object.defineProperty(e,t,o)},e.exports={ext:function(e){for(var t in r.options)r.createOption(e,t)}}},function(e,t,n){console.info("ulog:levels");var r=n(0);r.add("options",{level:{fromString:function(e){return void 0!==e&&(Number(e)!=Number(e)?r.levels[e.toLowerCase()]:Number(e))},toString:function(e){for(x in r.levels)if(r.levels[x]===e)return x.toUpperCase()},get:function(e,t){return Math.max(r.enabled(e)&&e.DEBUG||e.NONE,t)}}}),e.exports={ext:function(e){for(var t in e.NONE=0,e.ALL=9007199254740991,r.levels)e[t.toUpperCase()]=r.levels[t],e!=r&&e.level<r.levels[t]&&(e[t]=function(){})}}},function(e,t,n){var r=e.exports=n(0);e.exports={ext:function(e){e!=r&&(e.assert=function(){var t=[].slice.call(arguments);t.shift()||e.error.apply(e,t)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnlsb2dnZXIvYW55bG9nZ2VyLmpzIiwid2VicGFjazovLy8uL29wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbGV2ZWxzLmpzIiwid2VicGFjazovLy8uL2Fzc2VydC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImEiLCJleHQiLCJtb2RzIiwiYWRkIiwiZW52IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImUiLCJzZXQiLCJ2IiwidW5kZWZpbmVkIiwicmVtb3ZlSXRlbSIsInNldEl0ZW0iLCJvcHRpb25zIiwibGV2ZWxzIiwiYXNzZXJ0IiwibmV3IiwiZXJyb3IiLCJ3YXJuIiwiaW5mbyIsImxvZyIsImRlYnVnIiwidHJhY2UiLCJldmFsIiwieCIsImxlbmd0aCIsInNoaWZ0IiwiYXBwbHkiLCJjb25zb2xlIiwic2V0dGluZ3MiLCJwZXJzaXN0IiwicGFyc2VkIiwicGFyc2VPcHRpb24iLCJjYWNoZWQiLCJldmFsT3B0aW9uIiwibG9hZCIsImVuYWJsZSIsInRoaXMiLCJkaXNhYmxlIiwiZW5hYmxlZCIsIml0ZW0iLCJpZHgiLCJpdGVtcyIsInNwbGl0IiwibWFwIiwicmVwbGFjZSIsImltcGxpZWQiLCJpbmRleE9mIiwidHJpbSIsInN1YnN0cmluZyIsImV4cHJlc3Npb25zIiwic2V0dGluZyIsImluY2wiLCJleGNsIiwicHVzaCIsImoiLCJSZWdFeHAiLCJzdWJzdHIiLCJ0ZXN0IiwiY3JlYXRlT3B0aW9uIiwiZGVmIiwiY29uZmlndXJhYmxlIiwiZnJvbVN0cmluZyIsInRvU3RyaW5nIiwibGV2ZWwiLCJOdW1iZXIiLCJ0b0xvd2VyQ2FzZSIsInRvVXBwZXJDYXNlIiwiTWF0aCIsIm1heCIsIkRFQlVHIiwiTk9ORSIsIkFMTCIsInNsaWNlIiwiYXJndW1lbnRzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFF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QUFBbkIsRUFBUXBDLEVBQVEsR0FFaEJvQyxFQUFBRyxJQUFBLFdBU0E2RCxNQUFBLENBRUFGLFdBQUEsU0FBQXJELEdBQ0EsWUFBQUMsSUFBQUQsSUFBQXdELE9BQUF4RCxJQUFBd0QsT0FBQXhELEdBQ0FULEVBQUFjLE9BQUFMLEVBQUF5RCxlQUNBRCxPQUFBeEQsS0FJQXNELFNBQUEsU0FBQXRELEdBQ0EsSUFBQWUsS0FBQXhCLEVBQUFjLE9BQ0EsR0FBQWQsRUFBQWMsT0FBQVUsS0FBQWYsRUFDQSxPQUFBZSxFQUFBMkMsZUFHQXRGLElBQUEsU0FBQVosRUFBQXdDLEdBQ0EsT0FBQTJELEtBQUFDLElBQUFyRSxFQUFBdUMsUUFBQXRFLE1BQUFxRyxPQUFBckcsRUFBQXNHLEtBQUE5RCxPQUtBMUMsRUFBQUQsUUFBQSxDQUNBbUMsSUFBQSxTQUFBaEMsR0FHQSxRQUFBd0MsS0FGQXhDLEVBQUFzRyxLQUFBLEVBQ0F0RyxFQUFBdUcsSUFBQSxpQkFDQXhFLEVBQUFjLE9BQ0E3QyxFQUFBd0MsRUFBQTBELGVBQUFuRSxFQUFBYyxPQUFBTCxHQUNBeEMsR0FBQStCLEdBQUEvQixFQUFBK0YsTUFBQWhFLEVBQUFjLE9BQUFMLEtBQUF4QyxFQUFBd0MsR0FBQSxpQ0N4Q0EsSUFBQVQsRUFBQWpDLEVBQUFELFFBQXlCRixFQUFRLEdBRWpDRyxFQUFBRCxRQUFBLENBQ0FtQyxJQUFBLFNBQUFoQyxHQUNBQSxHQUFBK0IsSUFDQS9CLEVBQUE4QyxPQUFBLFdBQ0EsSUFBQWYsRUFBQSxHQUFBeUUsTUFBQXRHLEtBQUF1RyxXQUNBMUUsRUFBQTBCLFNBQUF6RCxFQUFBZ0QsTUFBQVUsTUFBQTFELEVBQUErQiIsImZpbGUiOiJudWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiLy8gdWxvZyAtIHRoZSB1bml2ZXJzYWwgbG9nZ2VyXHJcbi8vIMKpIDIwMTkgYnkgU3Rpam4gZGUgV2l0dCwgc29tZSByaWdodHMgcmVzZXJ2ZWQuIExpY2Vuc2U6IENDLUJZLTQuMFxyXG4vLyBQZXJtaXNzaW9uIHRvIHJlbW92ZSB0aGVzZSBjb21tZW50cyBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBoZXJlYnkgZ3JhbnRlZFxyXG5cclxuLy8gaW1wb3J0IGFueWxvZ2dlciBhcyB1bG9nIHN1cHBvcnRzIGl0IG5hdGl2ZWx5XHJcbnZhciBhID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdhbnlsb2dnZXInKVxyXG52YXIgZXh0ID0gYS5leHQgLy8gc2F2ZSBmb3IgbGF0ZXJcclxuXHJcbi8qKlxyXG4gKiBgdWxvZy5leHQobG9nZ2VyKSA9PiBsb2dnZXJgXHJcbiAqIFxyXG4gKiBDYWxsZWQgd2hlbiBhIGxvZ2dlciBvciB0aGUgYHVsb2dgIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGV4dGVuZGVkLCBcclxuICogZWl0aGVyIGJlY2F1c2UgaXQgd2FzIG5ld2x5IGNyZWF0ZWQsIG9yIGJlY2F1c2UgaXQncyBjb25maWd1cmF0aW9uIFxyXG4gKiBvciBzZXR0aW5ncyBjaGFuZ2VkIGluIHNvbWUgd2F5LlxyXG4gKiBcclxuICogVGhpcyBtZXRob2QgbXVzdCBlbnN1cmUgdGhhdCBhIGxvZyBtZXRob2QgaXMgYXZhaWxhYmxlIG9uIHRoZSBsb2dnZXIgXHJcbiAqIGZvciBlYWNoIGxldmVsIGluIGB1bG9nLmxldmVsc2AuXHJcbiAqIFxyXG4gKiBUaGlzIG92ZXJyaWRlIHVzZXMgbm9vcCBtZXRob2RzIGZvciBhbGwgbG9nIG1ldGhvZHMgdGhhdCBhcmUgYmVsb3cgXHJcbiAqIHRoZSBhY3RpdmUgbG9nIGxldmVsLlxyXG4gKi9cclxuYS5leHQgPSBmdW5jdGlvbihsKSB7XHJcblx0aWYgKGwpIHtcclxuXHRcdGlmIChsICE9PSBhKSBcdGV4dChsKSAvLyBjcmVhdGUgZGVmYXVsdCBtZXRob2RzIGJ5IGNhbGxpbmcgYW55bG9nZ2VyLmV4dFxyXG5cdFx0Ly8gY2FsbCBleHQgb24gYWxsIHJlZ2lzdGVyZWQgbW9kcyB0aGF0IGhhdmUgdGhhdCBtZXRob2RcclxuXHRcdGZvciAodmFyIG4gaW4gYS5tb2RzKSB7XHJcblx0XHRcdGlmIChhLm1vZHNbbl0uZXh0KSBhLm1vZHNbbl0uZXh0KGwpXHJcblx0XHR9XHJcblx0fVxyXG5cdGVsc2Uge1xyXG5cdFx0YS5leHQoYSlcclxuXHRcdGZvciAobCBpbiBhKCkpIFxyXG5cdFx0XHRhLmV4dChhKClbbF0pXHJcblx0fVxyXG5cdHJldHVybiBsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdWxvZy5hZGQodHlwZSwgY29tcG9uZW50cylgXHJcbiAqIFxyXG4gKiBBZGRzIGBjb21wb25lbnRzYCBvZiBgdHlwZWAgdG8gdWxvZy5cclxuICogXHJcbiAqIFBvc3NpYmxlIHR5cGVzIGluY2x1ZGUgYCdtb2RzJ2AsIGAnb3B0aW9ucydgLCBcclxuICogYCdvdXRwdXRzJ2AgYW5kICBgJ2Zvcm1hdHMnYC5cclxuICovXHJcbmEuYWRkID0gZnVuY3Rpb24odCwgYykge1xyXG5cdGZvciAodmFyIG4gaW4gYykgKGFbdF0gfHwgKGFbdF0gPSB7fSkpW25dID0gY1tuXVxyXG5cdGEuZXh0KClcclxufVxyXG4iLCIvLyB1bG9nIC0gdGhlIHVuaXZlcnNhbCBsb2dnZXJcclxuLy8gwqkgMjAxOSBieSBTdGlqbiBkZSBXaXR0LCBzb21lIHJpZ2h0cyByZXNlcnZlZFxyXG4vLyBMaWNlbnNlOiBDQy1CWS00LjBcclxudmFyIGEgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29yZScpXHJcblxyXG5hLmVudiA9IHtcclxuXHRnZXQ6IGZ1bmN0aW9uKG4pe3RyeSB7cmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKG5hbWUobikpfWNhdGNoKGUpey8qIGlnbm9yZSAqL319LFxyXG5cdHNldDogZnVuY3Rpb24obix2KXt0cnkge3Y9PT11bmRlZmluZWQgPyBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShuYW1lKG4pKSA6IGxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUobiksdil9Y2F0Y2goZSl7LyogaWdub3JlICovfX1cclxufVxyXG5cclxuYS5hZGQoJ21vZHMnLCB7XHJcblx0b3B0aW9uczogcmVxdWlyZSgnLi9vcHRpb25zJyksXHJcbiAgbGV2ZWxzOiByZXF1aXJlKCcuL2xldmVscycpLFxyXG4gIGFzc2VydDogcmVxdWlyZSgnLi9hc3NlcnQnKSxcclxuICAvLyBvdXRwdXRzOiByZXF1aXJlKCcuL291dHB1dHMnKSxcclxuICAvLyBmb3JtYXRzOiByZXF1aXJlKCcuL2Zvcm1hdHMnKSxcclxufSlcclxuXHJcbi8vIGNvbnZlcnQgb3B0aW9uIG5hbWUgdG8gcGxhdGZvcm0gc3R5bGVcclxuZnVuY3Rpb24gbmFtZShuKXtcclxuICByZXR1cm4gbiA9PSAnbGV2ZWwnID8gJ2xvZycgOiAobiA9PSAnZGVidWcnID8gJ2RlYnVnJyA6ICdsb2dfJyArIG4pXHJcbn1cclxuIiwiLyoqXHJcbiAqICBBICBOICBZICBMICBPICBHICBHICBFICBSXHJcbiAqICBHZXQgYSBsb2dnZXIuIEFueSBsb2dnZXIuXHJcbiAqIFxyXG4gKiAgwqkgMjAxOSBieSBTdGlqbiBkZSBXaXR0LCBzb21lIHJpZ2h0cyByZXNlcnZlZFxyXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBPcGVuIFNvdXJjZSBsaWNlbnNlXHJcbiAqICBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4gKi9cclxuXHJcbiAvLyBzdG9yZXMgbG9nIG1vZHVsZXMga2V5ZWQgYnkgbmFtZVxyXG52YXIgbSA9IE9iamVjdC5jcmVhdGUobnVsbClcclxuXHJcbi8qKlxyXG4gKiBhbnlsb2dnZXIoW25hbWVdIFssIGNvbmZpZ10pID0+IGZ1bmN0aW9uIGxvZ2dlcihbbGV2ZWw9J2xvZyddIFssIC4uLmFyZ3NdKVxyXG4gKiBcclxuICogVGhlIG1haW4gYGFueWxvZ2dlcmAgZnVuY3Rpb24gY3JlYXRlcyBhIG5ldyBvciByZXR1cm5zIGFuIGV4aXN0aW5nIGxvZ2dlciBcclxuICogd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgLiBJdCBtYWludGFpbnMgYSByZWdpc3RyeSBvZiBhbGwgY3JlYXRlZCBsb2dnZXJzLCBcclxuICogd2hpY2ggaXQgcmV0dXJucyB3aGVuIGNhbGxlZCB3aXRob3V0IGEgbmFtZSwgb3Igd2l0aCBhbiBlbXB0eSBuYW1lLlxyXG4gKiBcclxuICogSWYgYW55bG9nZ2VyIG5lZWRzIHRvIGNyZWF0ZSBhIG5ldyBsb2dnZXIsIGl0IGludm9rZXMgXHJcbiAqIFtgYW55bG9nZ2VyLmNyZWF0ZWBdKCNhbnlsb2dnZXJjcmVhdGUpLlxyXG4gKiBcclxuICogQHBhcmFtIG5hbWUge1N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGxvZ2dlciB0byBjcmVhdGVcclxuICogQHBhcmFtIGNvbmZpZyB7T2JqZWN0fSBBbiBvcHRpb25hbCBjb25maWcgb2JqZWN0XHJcbiAqIFxyXG4gKiBAcmV0dXJucyBBIGxvZ2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZWAgYW5kIGBjb25maWdgLlxyXG4gKi9cclxudmFyIGEgPSBmdW5jdGlvbihuLGMpe1xyXG4gIC8vIHJldHVybiB0aGUgZXhpc3RpbmcgbG9nZ2VyLCBvciBjcmVhdGUgYSBuZXcgb25lLiBpZiBubyBuYW1lIHdhcyBnaXZlbiwgcmV0dXJuIGFsbCBsb2dnZXJzXHJcbiAgcmV0dXJuIG4gPyBtW25dIHx8IChtW25dID0gYS5leHQoYS5uZXcobixjKSkpIDogbVxyXG59XHJcblxyXG4vKipcclxuICogYGFueWxvZ2dlci5sZXZlbHNgXHJcbiAqXHJcbiAqIEFuIG9iamVjdCBjb250YWluaW5nIGEgbWFwcGluZyBvZiBsZXZlbCBuYW1lcyB0byBsZXZlbCB2YWx1ZXMuXHJcbiAqIFxyXG4gKiBUbyBiZSBjb21wbGlhbnQgd2l0aCB0aGUgYW55bG9nZ2VyIEFQSSwgbG9nZ2VycyBzaG91bGQgc3VwcG9ydCBhdCBsZWFzdCBcclxuICogdGhlIGxvZyBtZXRob2RzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGRlZmF1bHQgbGV2ZWxzLCBidXQgdGhleSBtYXkgZGVmaW5lIFxyXG4gKiBhZGRpdGlvbmFsIGxldmVscyBhbmQgdGhleSBtYXkgY2hvb3NlIHRvIHVzZSBkaWZmZXJlbnQgbnVtZXJpYyB2YWx1ZXMgXHJcbiAqIGZvciBhbGwgdGhlIGxldmVscy5cclxuICogXHJcbiAqIFRoZSBndWFyYW50ZWVzIHRoZSBBbnlsb2dnZXIgQVBJIG1ha2VzIGFyZTpcclxuICogLSB0aGVyZSBpcyBhIGxvZ2dpbmcgbWV0aG9kIGNvcnJlc3BvbmRpbmcgdG8gZWFjaCBsZXZlbCBsaXN0ZWQgaW4gYW55bG9nZ2VyLmxldmVsc1xyXG4gKiAtIHRoZSBsZXZlbHMgZXJyb3IsIHdhcm4sIGluZm8sIGxvZywgZGVidWcgYW5kIHRyYWNlIGFyZSBhbHdheXMgdGhlcmVcclxuICogLSBlYWNoIGxldmVsIGNvcnJlc3BvbmRzIHRvIGEgbnVtZXJpYyB2YWx1ZVxyXG4gKiBcclxuICogTm90ZSB0aGF0IHRoZSBBbnlsb2dnZXIgQVBJIGV4cGxpY2l0bHkgZG9lcyBub3QgZ3VhcmFudGVlIHRoYXQgYWxsIGxldmVscyBcclxuICogaGF2ZSBkaXN0aW5jdCB2YWx1ZXMgb3IgdGhhdCB0aGUgbnVtZXJpYyB2YWx1ZXMgd2lsbCBmb2xsb3cgYW55IHBhdHRlcm5cclxuICogb3IgaGF2ZSBhbnkgc3BlY2lmaWMgb3JkZXIuIEZvciB0aGlzIHJlYXNvbiBpdCBpcyBiZXN0IHRvIHRoaW5rIG9mIGxldmVsc1xyXG4gKiBhcyBzZXBhcmF0ZSBsb2cgY2hhbm5lbHMsIHBvc3NpYmx5IGdvaW5nIHRvIGRpZmZlcmVudCBvdXRwdXQgbG9jYXRpb25zLlxyXG4gKiBcclxuICogWW91IGNhbiByZXBsYWNlIG9yIGNoYW5nZSB0aGlzIG9iamVjdCB0byBpbmNsdWRlIGxldmVscyBjb3JyZXNwb25kaW5nIHdpdGhcclxuICogdGhvc2UgYXZhaWxhYmxlIGluIHRoZSBmcmFtZXdvcmsgeW91IGFyZSB3cml0aW5nIGFuIGFkYXB0ZXIgZm9yLiBQbGVhc2VcclxuICogbWFrZSBzdXJlIHRvIGFsd2F5cyBpbmNsdWRlIHRoZSBkZWZhdWx0IGxldmVscyBhcyB3ZWxsIHNvIGFsbCBjb2RlIGNhblxyXG4gKiByZWx5IG9uIHRoZSA2IGNvbnNvbGUgbWV0aG9kcyBgZXJyb3JgLCBgd2FybmAsIGBpbmZvYCwgYGxvZ2AsIGBkZWJ1Z2AgYW5kXHJcbiAqIGB0cmFjZWAgdG8gYWx3YXlzIGJlIHRoZXJlLlxyXG4gKi9cclxuYS5sZXZlbHMgPSB7ZXJyb3I6MSwgd2FybjoyLCBpbmZvOjMsIGxvZzo0LCBkZWJ1Zzo1LCB0cmFjZTo2fVxyXG5cclxuLyoqXHJcbiAqIGBhbnlsb2dnZXIubmV3KG5hbWUsIGNvbmZpZylgXHJcbiAqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbG9nZ2VyIGZ1bmN0aW9uIHRoYXQgY2FsbHMgYGFueWxvZ2dlci5sb2dgIHdoZW4gaW52b2tlZC5cclxuICogXHJcbiAqIFVzZXMgc29tZSBldmlsIGV2YWwgdHJpY2tlcnkgdG8gY3JlYXRlIGEgbmFtZWQgZnVuY3Rpb24gc28gdGhhdCBmdW5jdGlvbi5uYW1lXHJcbiAqIGNvcnJlc3BvbmRzIHRvIHRoZSBtb2R1bGUgbmFtZSBnaXZlbi4gUG9seWZpbGxzIGZ1bmN0aW9uLm5hbWUgb24gcGxhdGZvcm1zXHJcbiAqIHdoZXJlIGl0IGlzIG5vdCBuYXRpdmVseSBhdmFpbGFibGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lIHtTdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBsb2dnZXIgdG8gY3JlYXRlXHJcbiAqIEBwYXJhbSBjb25maWcge09iamVjdH0gQW4gb3B0aW9uYWwgY29uZmlnIG9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJucyBBIG5ldyBsb2dnZXIgZnVuY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgLlxyXG4gKi9cclxuYS5uZXcgPSBmdW5jdGlvbihuLGMscikge1xyXG4gIC8vIHVzZSBldmFsIHRvIGNyZWF0ZSBhIG5hbWVkIGZ1bmN0aW9uLCB0aGlzIG1ldGhvZCBoYXMgYmVzdCBjcm9zcy1icm93c2VyXHJcbiAgLy8gc3VwcG9ydCBhbmQgYWxsb3dzIHVzIHRvIGNyZWF0ZSBmdW5jdGlvbnMgd2l0aCBuYW1lcyBjb250YWluaW5nIHN5bWJvbHNcclxuICAvLyBzdWNoIGFzICc6JywgJy0nIGV0YyB3aGljaCBvdGhlcndpc2UgYXJlIG5vdCBsZWdhbCBpbiBpZGVudGlmaWVycy5cclxuICAvLyB0aGUgY3JlYXRlZCBmdW5jdGlvbiBjYWxscyBgYW55bG9nZ2VyLmxvZ2AgdG8gY2FsbCB0aGUgYWN0dWFsIGxvZyBtZXRob2RcclxuICBldmFsKFwicj17J1wiICsgbiArIFwiJzpmdW5jdGlvbigpe2EubG9nKG4sW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKX19W25dXCIpXHJcbiAgLy8gSUUgc3VwcG9ydDogaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaXMgbm90IHNldCwgYWRkIGEgcHJvcGVydHkgbWFudWFsbHlcclxuICAvLyB0aGUgbG9nZ2luZyBtZXRob2RzIHdpbGwgYmUgYWRkZWQgYnkgYW55bG9nZ2VyLmV4dFxyXG4gIHJldHVybiByLm5hbWUgPyByIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsICduYW1lJywge2dldDpmdW5jdGlvbigpe3JldHVybiBufX0pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgYW55bG9nZ2VyLmxvZyhuYW1lLCBhcmdzKWBcclxuICogXHJcbiAqIFRoZSBsb2cgZnVuY3Rpb24gdXNlZCBieSBgYW55bG9nZ2VyLm5ld2AuXHJcbiAqIFxyXG4gKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSBpbnZvY2F0aW9uIGJlaGF2aW9yLlxyXG4gKiBcclxuICogQHBhcmFtIG5hbWUge1N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGxvZ2dlciB0byB1c2VcclxuICogQHBhcmFtIGFyZ3Mge0FycmF5fSBUaGUgbG9nIGFyZ3VtZW50c1xyXG4gKiBcclxuICogVGhpcyBtZXRob2QgaW5zcGVjdHMgdGhlIGZpcnN0IGFyZ3VtZW50IGluIGBhcmdzYCB0byBkZXRlcm1pbmUgdGhlIGxvZyBcclxuICogbGV2ZWwgdG8gbG9nIGF0IChkZWZhdWx0cyB0byAnbG9nJykgYW5kIHRoZW4gY2FsbHMgdGhlIGNvcnJlY3QgbWV0aG9kIFxyXG4gKiBvbiB0aGUgbG9nZ2VyIGZ1bmN0aW9uIHdpdGggdGhlIHJlbWFpbmluZyBhcmd1bWVudHMuIFxyXG4gKi9cclxuYS5sb2cgPSBmdW5jdGlvbihuLHgpIHtcclxuICBtW25dW3gubGVuZ3RoID4gMSAmJiBhLmxldmVsc1t4WzBdXSA/IHguc2hpZnQoKSA6ICdsb2cnXS5hcHBseShtW25dLCB4KVxyXG59XHJcblxyXG4vKipcclxuICogYGFueWxvZ2dlci5leHQobG9nZ2VyKSA9PiBsb2dnZXJgXHJcbiAqIFxyXG4gKiBDYWxsZWQgd2hlbiBhIGxvZ2dlciBuZWVkcyB0byBiZSBleHRlbmRlZCwgZWl0aGVyIGJlY2F1c2UgaXQgd2FzIG5ld2x5XHJcbiAqIGNyZWF0ZWQsIG9yIGJlY2F1c2UgaXQncyBjb25maWd1cmF0aW9uIG9yIHNldHRpbmdzIGNoYW5nZWQgaW4gc29tZSB3YXkuXHJcbiAqIFxyXG4gKiBUaGlzIG1ldGhvZCBtdXN0IGVuc3VyZSB0aGF0IGEgbG9nIG1ldGhvZCBpcyBhdmFpbGFibGUgb24gdGhlIGxvZ2dlciBmb3JcclxuICogZWFjaCBsZXZlbCBpbiBgYW55bG9nZ2VyLmxldmVsc2AuXHJcbiAqIFxyXG4gKiBXaGVuIG92ZXJyaWRpbmcgYGFueWxvZ2dlci5leHRgLCBwbGVhc2UgZW5zdXJlIHRoZSBmdW5jdGlvbiBjYW4gc2FmZWx5IFxyXG4gKiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgb2JqZWN0XHJcbiAqIFxyXG4gKiBAcGFyYW0gbG9nZ2VyIEZ1bmN0aW9uIFRoZSBsb2dnZXIgdG8gYmUgKHJlLSlleHRlbmRlZFxyXG4gKiBcclxuICogQHJldHVybiBUaGUgbG9nZ2VyIHRoYXQgd2FzIGdpdmVuLCBleHRlbmRlZFxyXG4gKi9cclxuYS5leHQgPSBmdW5jdGlvbihsLG8pIHtcclxuICBvID0gdHlwZW9mIGNvbnNvbGUgIT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZVxyXG4gIGZvciAodiBpbiBhLmxldmVscylcclxuICAgIGxbdl0gPSBvICYmIChvW3ZdIHx8IG8ubG9nKSB8fCBmdW5jdGlvbigpe31cclxuICByZXR1cm4gbDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBhXHJcbiIsInZhciBhID0gcmVxdWlyZSgnLi9jb3JlJylcclxuXHJcbi8vIHRoZSBzZXR0aW5ncyBhcyBhcHBsaWNhYmxlXHJcbnZhciBzZXR0aW5ncyA9IHt9XHJcblxyXG4vKipcclxuICogYHVsb2cuc2V0KG5hbWUsIHZhbHVlLCBbcGVyc2lzdF0pYFxyXG4gKiBcclxuICogU2V0cyB0aGUgc2V0dGluZyBmb3IgdGhlIG9wdGlvbiBuYW1lZCBgbmFtZWAgdG8gdGhlIGdpdmVuIGB2YWx1ZWAuXHJcbiAqIElmIGBwZXJzaXN0YCBpcyB0cnVlLCB0aGUgdmFsdWUgd2lsbCBiZSBwZXJzaXN0ZWQgdG8gdGhlIGVudmlyb25tZW50XHJcbiAqICh3aGVyZSBzdXBwb3J0ZWQpLCBvdGhlcndpc2UsIHRoZSBjaGFuZ2Ugd2lsbCBiZSBtYWRlIGluIG1lbW9yeSBvbmx5LlxyXG4gKiBcclxuICogRS5nLiB0byBzZXQgdGhlIGxvZyBsZXZlbCBmb3IgYWxsIGxvZ2dlcnMgdG8gJ3dhcm4nOlxyXG4gKiBcclxuICogYHVsb2cuc2V0KCdsZXZlbCcsICd3YXJuJylgXHJcbiAqIFxyXG4gKiBUaGUgYHZhbHVlYCBtYXkgY29udGFpbiBhIGxpdGVyYWwgdmFsdWUgZm9yIHRoZSBzZXR0aW5nLCBvclxyXG4gKiBpdCBtYXkgY29udGFpbiBhIHNlbWljb2xvbiBzZXBhcmF0ZWQgbGlzdCBvZiBgZXhwcmVzc2lvbj12YWx1ZWAgcGFpcnMsXHJcbiAqIHdoZXJlIGBleHByZXNzaW9uYCBpcyBhIGRlYnVnLXN0eWxlIHBhdHRlcm4gYW5kIGB2YWx1ZWAgaXMgYSBsaXRlcmFsIHZhbHVlXHJcbiAqIGZvciB0aGUgc2V0dGluZy4gVGhlIGxpdGVyYWwgdmFsdWUgbWF5IG5vdCBjb250YWluIGFueSBzZW1pY29sb25zLCBvciBtdXN0XHJcbiAqIGVzY2FwZSB0aGVtIGJ5IHByZWNlZGluZyB0aGVtIHdpdGggYSBiYWNrc2xhc2g6IGBcXDtgLlxyXG4gKiBcclxuICogRS5nLiB0byBzZXQgdGhlIGxvZyBsZXZlbCBmb3IgbGliQSB0byBFUlJPUiwgZm9yIGxpYkIgdG8gSU5GTyBhbmQgZm9yIFxyXG4gKiBhbGwgb3RoZXIgbG9nZ2VycyB0byBXQVJOOlxyXG4gKiBcclxuICogYHVsb2cuc2V0KCdsZXZlbCcsICdsaWJBPWVycm9yOyBsaWJCPWluZm87ICo9d2FybicpYFxyXG4gKiBcclxuICogQm90aCBmb3JtcyBtYXkgYmUgY29tYmluZWQ6XHJcbiAqIFxyXG4gKiBgdWxvZy5zZXQoJ2xldmVsJywgJ3dhcm47IGxpYkE9ZXJyb3I7IGxpYkI9aW5mbycpYCAvLyBzYW1lIGFzIGFib3ZlXHJcbiAqIFxyXG4gKiBUaGUgYGV4cHJlc3Npb249dmFsdWVgIHBhaXJzIGFyZSBldmFsdWF0ZWQgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIGxpc3RlZCxcclxuICogdGhlIGZpcnN0IGBleHByZXNzaW9uYCB0byBtYXRjaCBkZWNpZGVzIHdoaWNoIGB2YWx1ZWAgaXMgcmV0dXJuZWQuIFxyXG4gKiBcclxuICogVGhlIGBleHByZXNzaW9uYCBjYW4gYmUgYSBsaXN0IG9mIHBhdHRlcm5zIGFuZCBjb250YWluIHdpbGRjYXJkcyBcclxuICogYW5kIG5lZ2F0aW9uczpcclxuICogXHJcbiAqIGB1bG9nLnNldCgnbGV2ZWwnLCAnaW5mbzsgbGliKiwtbGliQz1lcnJvcjsgbGliQz13YXJuJylgXHJcbiAqIFxyXG4gKiBUaGUgdmFsdWVzIGFyZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSBmb3IgZGlmZmVyZW50IHNldHRpbmdzLlxyXG4gKi9cclxuYS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcGVyc2lzdCkge1xyXG4gIC8vIHRoaXMgd2lwZXMgYW55IHBhcnNlZC9jYWNoZWQgcmVzdWx0cyB0aGF0IHdlcmUgc3RvcmVkIG9uIHRoZSBzZXR0aW5nXHJcbiAgc2V0dGluZ3NbbmFtZV0gPSB2YWx1ZSBcclxuICBpZiAocGVyc2lzdCAmJiBhLmVudi5zZXQpIGEuZW52LnNldChuYW1lLCB2YWx1ZSlcclxuICBmb3IobSBpbiBhLm1vZHMpIGEubW9kc1ttXS5zZXQgJiYgYS5tb2RzW21dLnNldChuYW1lLCB2YWx1ZSwgcGVyc2lzdClcclxuICBhLmV4dCgpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBgdWxvZy5nZXQoW25hbWVdLCBbbG9nZ2VyXSlgXHJcbiAqIFxyXG4gKiBHZXRzIHRoZSBzZXR0aW5nIHN0cmluZyBmb3IgdGhlIG9wdGlvbiBuYW1lZCBgbmFtZWAuXHJcbiAqIFxyXG4gKiBJZiBubyBgbmFtZWAgaXMgZ2l2ZW4sIGFsbCBhdmFpbGFibGUgc2V0dGluZ3MgYXJlIHJldHVybmVkIGFzIGFuIG9iamVjdFxyXG4gKiB3aXRoIHNldHRpbmcgc3RyaW5ncyBrZXllZCBvbiBvcHRpb24gbmFtZS4gT3RoZXJ3aXNlLCBpZiBvbmx5IGBuYW1lYCBpc1xyXG4gKiBnaXZlbiwgdGhlIHNldHRpbmcgc3RyaW5nIGZvciB0aGUgb3B0aW9uIG5hbWVkIGBuYW1lYCBpcyByZXR1cm5lZC5cclxuICogXHJcbiAqIGBsb2dnZXJgIGlzIGEgbG9nZ2VyIG5hbWUuIElmIHRoaXMgc2Vjb25kIHBhcmFtZXRlciBpcyBnaXZlbiwgdGhlIHNldHRpbmdcclxuICogaXMgZXZhbHVhdGVkIGZvciB0aGF0IHNwZWNpZmljIGxvZ2dlciBhbmQgdGhlIHJlc3VsdCBpcyByZXR1cm5lZC4gSWYgZW1wdHlcclxuICogc3RyaW5nIGlzIGdpdmVuIGFzIGxvZ2dlciBuYW1lLCB0aGUgZ2xvYmFsL2RlZmF1bHQgc2V0dGluZyBpcyByZXR1cm5lZC5cclxuICogXHJcbiAqIEZvciBleGFtcGxlLCBnaXZlbiB0aGF0IHRoZSBmb2xsb3dpbmcgc2V0dGluZ3MgYXJlIGFjdGl2ZTpcclxuICogXHJcbiAqIGB7IGxldmVsOiAnaW5mbzsgbGliQT13YXJuOyBsaWJCPWVycm9yJywgb3V0cHV0OiAnY29uc29sZScgfWBcclxuICogXHJcbiAqIFRoZXNlIGZvbGxvd2luZyBzdGF0ZW1lbnRzIHdvdWxkIGJlIHRydWU6XHJcbiAqIFxyXG4gKiBgSlNPTi5zdHJpbmdpZnkodWxvZy5nZXQoKSkgPT0gJ3tcImxldmVsXCI6XCJpbmZvOyBsaWJBPXdhcm47IGxpYkI9ZXJyb3JcIixcIm91dHB1dFwiOlwiY29uc29sZVwifSdgXHJcbiAqIGB1bG9nLmdldCgnb3V0cHV0JykgPT0gJ2NvbnNvbGVgXHJcbiAqIGB1bG9nLmdldCgnbGV2ZWwnKSA9PSAnaW5mbzsgbGliQT13YXJuOyBsaWJCPWVycm9yJ2BcclxuICogYHVsb2cuZ2V0KCdsZXZlbCcsICdsaWJBJykgPT0gJ3dhcm4nYFxyXG4gKiBgdWxvZy5nZXQoJ2xldmVsJywgJ2xpYkInKSA9PSAnZXJyb3InYFxyXG4gKiBgdWxvZy5nZXQoJ2xldmVsJywgJ2xpYkMnKSA9PSAnaW5mbydgXHJcbiAqIGB1bG9nLmdldCgnbGV2ZWwnLCAnJykgPT0gJ2luZm8nYFxyXG4gKi9cclxuYS5nZXQgPSBmdW5jdGlvbihuLGwpIHtcclxuICBpZiAoIW4pIHJldHVybiBzZXR0aW5ncyBcclxuICBpZiAobCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gc2V0dGluZ3Nbbl1cclxuICAvLyB1c2UgcGFyc2VkIHNldHRpbmdzIGlmIHRoZXkgZXhpc3QsIG9yIHBhcnNlIG5vdyBhbmQgc2F2ZSBmb3IgbGF0ZXIgdXNlXHJcbiAgdmFyIHNldCA9IHNldHRpbmdzW25dIFxyXG4gICAgPyBzZXR0aW5nc1tuXS5wYXJzZWQgfHwgKHNldHRpbmdzW25dLnBhcnNlZCA9IGEucGFyc2VPcHRpb24obiwgc2V0dGluZ3Nbbl0pKSBcclxuICAgIDogW11cclxuICAvLyB1c2UgdGhlIGNhY2hlZCBzZXR0aW5ncyBpZiB0aGV5IGV4aXN0LCBvciBjcmVhdGUgbm93IGFuZCBzYXZlIGZvciBsYXRlclxyXG4gIHZhciBjID0ge31cclxuICBjID0gc2V0dGluZ3Nbbl0gPyBzZXR0aW5nc1tuXS5jYWNoZWQgfHwgKHNldHRpbmdzW25dLmNhY2hlZCA9IGMpIDogY1xyXG4gIC8vIGlmIHdlIGZvdW5kIGNhY2hlZCBzZXR0aW5ncywgcmV0dXJuIHRoZW0gbm93XHJcbiAgaWYgKGNbbF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGNbbF1cclxuICAvLyBiZWNhdXNlIHdlIHNhdmUgdGhlIHBhcnNlZCBhbmQgY2FjaGVkIHNldHRpbmdzIG9uIHRoZSBzZXR0aW5nIHN0cmluZyBcclxuICAvLyB0aGV5IGNhbiBuZXZlciBnbyBvdXQtb2YtZGF0ZTsgd2hlbmV2ZXIgdGhlIHNldHRpbmcgc3RyaW5nIGlzIFxyXG4gIC8vIG92ZXJ3cml0dGVuLCB0aGUgcGFyc2VkL2NhY2hlZCBzZXR0aW5ncyBhcmUgY2xlYW5lZCB1cCBhcyB3ZWxsXHJcbiAgY1tsXSA9IGEuZXZhbE9wdGlvbihzZXQsIGwpXHJcbiAgZm9yKG0gaW4gYS5tb2RzKSBhLm1vZHNbbV0uZ2V0ICYmIGEubW9kc1ttXS5nZXQoY1tsXSlcclxuICByZXR1cm4gY1tsXVxyXG59XHJcblxyXG4vKipcclxuICogYHVsb2cubG9hZChbbmFtZV0pYFxyXG4gKiBcclxuICogKHJlKWxvYWRzIHRoZSBjb25maWd1cmF0aW9uIGZyb20gdGhlIGVudmlyb25tZW50LlxyXG4gKiBcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgT3B0aW9uYWwgbmFtZSBvZiB0aGUgb3B0aW9uIHRvIGxvYWQuXHJcbiAqIFxyXG4gKiBJZiBgbmFtZWAgaXMgZ2l2ZW4sIG9ubHkgdGhhdCBvcHRpb24gaXMgbG9hZGVkLiBPdGhlcndpc2VcclxuICogYWxsIG9wdGlvbnMgYXJlIGxvYWRlZC5cclxuICovXHJcbmEubG9hZCA9IGZ1bmN0aW9uKG4pe1xyXG4gIGlmIChuKSBhLnNldChuLCBhLmVudi5nZXQobikpXHJcbiAgZWxzZSBmb3IgKG4gaW4gYS5vcHRpb25zKSBhLmxvYWQobilcclxufVxyXG5cclxuLyoqXHJcbiAqIGB1bG9nLmVuYWJsZShleHByZXNzaW9uKWBcclxuICogXHJcbiAqIEVuYWJsZXMgZGVidWcgbW9kZSBmb3IgdGhlIGxvZ2dlcnMgbWF0Y2hpbmcgYGV4cHJlc3Npb25gLlxyXG4gKiBcclxuICogVGhpcyByZXBsYWNlcyBhbnkgcHJldmlvdXNseSBhY3RpdmUgZXhwcmVzc2lvbiwgc28gaW4gcHJhY3RpY2UgaXRcclxuICogYWN0cyBtb3JlIGxpa2UgYSBzZXR0ZXIuIFRoZSBuYW1lIGBlbmFibGVgIGlzIGluaGVyaXRlZCBmcm9tIFxyXG4gKiBbZGVidWddKGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZGVidWcpIGFuZCBtYXkgYmUgYSBsaXR0bGUgXHJcbiAqIGNvbmZ1c2luZzpcclxuICogXHJcbiAqIHVsb2cuZW5hYmxlKCdsaWJBJylcclxuICogdWxvZy5lbmFibGUoJ2xpYkInKVxyXG4gKiB1bG9nLmVuYWJsZWQoJ2xpYkEnKSAgLy8gPT4gZmFsc3lcclxuICogdWxvZy5lbmFibGVkKCdsaWJCJykgIC8vID0+IHRydXRoeVxyXG4gKiB1bG9nLmVuYWJsZSgnbGliQSxsaWJCJylcclxuICogdWxvZy5lbmFibGVkKCdsaWJBJykgIC8vID0+IHRydXRoeVxyXG4gKiB1bG9nLmVuYWJsZWQoJ2xpYkInKSAgLy8gPT4gdHJ1dGh5XHJcbiAqIFxyXG4gKiBCZWxvdyB0aGUgc3VyZmFjZSwgdGhpcyBtZXRob2QgaXMgYm91bmQgdG8gYHVsb2cuc2V0KCdkZWJ1ZycsIGV4cHJlc3Npb24pYFxyXG4gKiBcclxuICogQHBhcmFtIHtTdHJpbmd9IGV4cHJlc3Npb24gQSBkZWJ1Zy1zdHlsZSBleHByZXNzaW9uXHJcbiAqL1xyXG5hLmVuYWJsZSA9IGEuc2V0LmJpbmQodGhpcywgJ2RlYnVnJylcclxuXHJcbi8qKlxyXG4gKiBgdWxvZy5kaXNhYmxlYFxyXG4gKiBcclxuICogRGlzYWJsZXMgZGVidWcgbW9kZSBmb3IgYWxsIGxvZ2dlcnMuXHJcbiAqIFxyXG4gKiBCZWxvdyB0aGUgc3VyZmFjZSwgdGhpcyBtZXRob2QgaXMgYm91bmQgdG8gYHVsb2cuc2V0KCdkZWJ1ZycsICcnKWBcclxuICovXHJcbmEuZGlzYWJsZSA9IGEuc2V0LmJpbmQodGhpcywgJ2RlYnVnJywgJycpXHJcblxyXG4vKipcclxuICogYHVsb2cuZW5hYmxlZChleHByZXNzaW9uKWBcclxuICogXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIGRlYnVnIG1vZGUgaXMgZW5hYmxlZCBmb3IgdGhlIGxvZ2dlcnMgbWF0Y2hpbmcgYGV4cHJlc3Npb25gLlxyXG4gKiBcclxuICogQmVsb3cgdGhlIHN1cmZhY2UsIHRoaXMgbWV0aG9kIGlzIGJvdW5kIHRvIGB1bG9nLmdldCgnZGVidWcnKWBcclxuICogXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBleHByZXNzaW9uIEEgZGVidWctc3R5bGUgZXhwcmVzc2lvblxyXG4gKiBcclxuICogQHJldHVybnMgQSB0cnV0aHkgdmFsdWUgd2hlbiBlbmFibGVkLCBhIGZhbHNleSB2YWx1ZSBvdGhlcndpc2VcclxuICovXHJcbmEuZW5hYmxlZCA9IGEuZ2V0LmJpbmQodGhpcywgJ2RlYnVnJylcclxuXHJcbi8qKlxyXG4gKiBgdWxvZy5wYXJzZU9wdGlvbihuYW1lLCB2YWx1ZSkgPT4gc2V0dGluZ3NbXWBcclxuICogXHJcbiAqIFBhcnNlcyB0aGUgb3B0aW9uIHN0cmluZywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHNldHRpbmcgdmFsdWUgb2JqZWN0c1xyXG4gKiBcclxuICogZS5nIGBwYXJzZU9wdGlvbignd2FybjsgdGVzdD1kZWJ1ZycpYCB3b3VsZCB5aWVsZDogXHJcbiAqIFxyXG4gKiBbe1xyXG4gKiBcdGluY2w6IFt0ZXN0XSxcclxuICogXHRleGNsOiBbXSxcclxuICogXHR2YWx1ZTogJ2RlYnVnJ1xyXG4gKiB9LHtcclxuICogICBpbmNsOiBbKl0sXHJcbiAqICAgZXhjbDogW10sXHJcbiAqICAgdmFsdWU6ICd3YXJuJ1xyXG4gKiB9XWBcclxuICogXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuIFRoZSBuYW1lIG9mIHRoZSBvcHRpb25cclxuICogQHBhcmFtIHtTdHJpbmd9IHYgVGhlIG9wdGlvbiBzdHJpbmdcclxuICogXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHBhcnNlZCBzZXR0aW5nIHZhbHVlIG9iamVjdHNcclxuICovXHJcbmEucGFyc2VPcHRpb24gPSBmdW5jdGlvbihuLCB2KSB7XHJcbiAgdmFyIHNldHRpbmdzID0gW10sIFxyXG4gICAgICBkID0gbiA9PSAnZGVidWcnIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCAnZGVidWcnXHJcbiAgdmFyIGl0ZW1zID0gKHZ8fCcnKS5zcGxpdCgvKD88IVxcXFwpOy8pLm1hcChmdW5jdGlvbih4KXtyZXR1cm4geC5yZXBsYWNlKCdcXFxcOycsICc7Jyl9KVxyXG4gIC8vIHBhcnNlIGB1bG9nYCBzdHlsZSBzZXR0aW5ncywgaW5jbHVkZSBzdXBwb3J0IGZvciBgZGVidWdgIHN0eWxlXHJcbiAgdmFyIGltcGxpZWQgPSBbXVxyXG4gIGZvciAodmFyIGk9MCxpdGVtLGlkeDsgaXRlbT1pdGVtc1tpXTsgaSsrKSB7XHJcbiAgICB2YXIgeCA9ICgoaWR4ID0gaXRlbS5pbmRleE9mKCc9JykpID09IC0xKSBcclxuICAgICAgICA/IFtpdGVtLnRyaW0oKV0gXHJcbiAgICAgICAgOiBbaXRlbS5zdWJzdHJpbmcoMCxpZHgpLnRyaW0oKSwgaXRlbS5zdWJzdHJpbmcoaWR4ICsgMSkudHJpbSgpXVxyXG4gICAgLy8gdWxvZzogZXhwcmVzc2lvbnMgaXMgZmlyc3QgcGFyYW0gb3Igbm9uZSBpZiBvbmx5IGEgc2V0dGluZyB2YWx1ZSBpcyBwcmVzZW50IChpbXBsaWVkKVxyXG4gICAgLy8gZGVidWc6IGV4cHJlc3Npb25zIGlzIGFsd2F5cyBmaXJzdCBhbmQgb25seSBwYXJhbVxyXG4gICAgdmFyIGV4cHJlc3Npb25zID0geFsxXSB8fCBkID8geFswXS5zcGxpdCgvW1xccyxdKy8pIDogW11cclxuICAgIC8vIHVsb2c6IHNldHRpbmcgdmFsdWUgaXMgc2Vjb25kIHBhcmFtLCBvciBmaXJzdCBpZiBvbmx5IGEgdmFsdWUgaXMgcHJlc2VudCAoaW1wbGllZClcclxuICAgIC8vIGRlYnVnOiBzZXR0aW5nIHZhbHVlIGlzIGFsd2F5cyBpbXBsaWVkIGxldmVsICdkZWJ1ZydcclxuICAgIHZhciBzZXR0aW5nID0geyB2YWx1ZTogeFsxXSB8fCAoIWQgJiYgeFswXSkgfHwgKGQgJiYgYS5sZXZlbHMuZGVidWcpLCBpbmNsOiBbXSwgZXhjbDogW10gfVxyXG4gICAgaWYgKGV4cHJlc3Npb25zLmxlbmd0aCkge1xyXG4gICAgICBzZXR0aW5ncy5wdXNoKHNldHRpbmcpXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZXhwcmVzc2lvbnMucHVzaCgnKicpXHJcbiAgICAgIGltcGxpZWQucHVzaChzZXR0aW5nKVxyXG4gICAgfVxyXG4gICAgLy8gYWRkIHRoZSBleHByZXNzaW9ucyB0byB0aGUgaW5jbC9leGNsIGxpc3RzIG9uIHRoZSBzZXR0aW5nXHJcbiAgICBmb3IgKHZhciBqPTAsczsgcz1leHByZXNzaW9uc1tqXTsgaisrKSB7XHJcbiAgICAgIHMgPSBzLnJlcGxhY2UoL1xcKi9nLCAnLio/JylcclxuICAgICAgc2V0dGluZ1tzWzBdPT0nLSc/J2V4Y2wnOidpbmNsJ10ucHVzaChuZXcgUmVnRXhwKCdeJyArIHMuc3Vic3RyKHNbMF09PSctJz8xOjApICsgJyQnKSlcclxuICAgIH1cclxuICB9XHRcclxuICAvLyBhZGQgaW1wbGllZCBzZXR0aW5ncyBsYXN0IHNvIHRoZXkgYWN0IGFzIGRlZmF1bHRzXHJcbiAgc2V0dGluZ3MucHVzaC5hcHBseShzZXR0aW5ncywgaW1wbGllZClcclxuICByZXR1cm4gc2V0dGluZ3NcclxufVxyXG5cclxuLyoqXHJcbiAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gcGFyc2VkIG9wdGlvbiBmb3IgdGhlIGdpdmVuIGxvZ2dlciBuYW1lLlxyXG4gKiBcclxuICogQHBhcmFtIHtBcnJheX0gc2V0IEFycmF5IG9mIHNldHRpbmcgdmFsdWVzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBsIExvZ2dlciBuYW1lXHJcbiAqIFxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc2V0dGluZyB2YWx1ZSBmb3IgdGhlIGdpdmVuIGxvZ2dlciBuYW1lXHJcbiAqL1xyXG5hLmV2YWxPcHRpb24gPSBmdW5jdGlvbihzZXQsbCl7XHJcbiAgZm9yICh2YXIgaT0wLHM7IHM9c2V0W2ldOyBpKyspIHsgICAgICAgICAgXHQvLyBmb3IgYWxsIHBhcnRzICgnaW5mbzsgdGVzdD1kZWJ1ZycgaGFzIDIgcGFydHMpXHJcbiAgICBmb3IgKHZhciBqPTAsZXhjbDsgZXhjbD1zLmV4Y2xbal07IGorKykgICAvLyBmb3IgYWxsIGV4Y2x1c2lvbiB0ZXN0c1xyXG4gICAgICBpZiAoZXhjbC50ZXN0KGwpKSBjb250aW51ZSAgICAgICAgICAgICAgLy8gaWYgbG9nZ2VyIG1hdGNoZXMgZXhjbHVkZSwgc2tpcCB0byBuZXh0IHBhcnRcclxuICAgIGZvciAodmFyIGo9MCxpbmNsOyBpbmNsPXMuaW5jbFtqXTsgaisrKVx0XHQvLyB3aGlsZSBubyByZXN1bHQsIGZvciBhbGwgaW5jbHVzaW9uIHRlc3RzXHJcbiAgICAgIGlmIChpbmNsLnRlc3QobCkpIHJldHVybiBzLnZhbHVlICAgIFx0XHQvLyBpZiBsb2dnZXIgbWF0Y2hlcyBpbmNsdWRlLCByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG59XHJcblxyXG4vKiogICAgICAgICAgICBcclxuICogYHVsb2cuY3JlYXRlT3B0aW9uKGxvZ2dlciwgbmFtZSwgb3B0aW9ucylgXHJcbiAqIFxyXG4gKiBDcmVhdGVzIGFuIGFvcHRpb24gbmFtZWQgYG5hbWVgIG9uIHRoZSBnaXZlbiBgbG9nZ2VyYCwgdXNpbmdcclxuICogdGhlIHByb3ZpZGVkIGBvcHRpb25zYCB3aGVuZXZlciBhcHBsaWNhYmxlLlxyXG4gKiBcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gbCBUaGUgbG9nZ2VyIGZ1bmN0aW9uLCBvciB0aGUgYHVsb2dgIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjcmVhdGVcclxuICogQHBhcmFtIHtPYmplY3R9IG8gQW4gb3B0aW9ucyBvYmplY3RcclxuICogXHJcbiAqIFRoZSBgb3B0aW9uc2Agb2JqZWN0IGNhbiBoYXZlIGZ1bmN0aW9ucyBgZnJvbVN0cmluZ2AgYW5kIGB0b1N0cmluZ2AgdGhhdFxyXG4gKiBjb252ZXJ0IGZyb20gYW5kIHRvIFN0cmluZywgYW5kIGBnZXRgIGFuZCBgc2V0YCB0aGF0IGFyZSBjYWxsZWQgd2hlbmV2ZXJcclxuICogdGhlIHByb3BlcnR5IGlzIHJlYWQgb3Igd3JpdHRlbi4gXHJcbiAqIFxyXG4gKiBAcmV0dXJucyBUaGUgZ2l2ZW4gYGxvZ2dlcmBcclxuICovXHJcbmEuY3JlYXRlT3B0aW9uID0gZnVuY3Rpb24obCwgbikge1xyXG4gIHZhciB2YWx1ZSAvLyBwcml2YXRlIGZpZWxkXHJcbiAgdmFyIGRlZiA9IHsgY29uZmlndXJhYmxlOiB0cnVlIH1cclxuICB2YXIgbyA9IGEub3B0aW9uc1tuXVxyXG4gIGRlZi5nZXQgPSBmdW5jdGlvbih2KXtcclxuICAgIHYgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBhLmdldChuLCBsID09PSBhID8gJycgOiBsLm5hbWUpXHJcbiAgICB2ID0gbyAmJiBvLmZyb21TdHJpbmcgPyBvLmZyb21TdHJpbmcodikgOiB2XHJcbiAgICB2ID0gbyAmJiBvLmdldCA/IG8uZ2V0KGwsIHYpIDogdlxyXG4gICAgcmV0dXJuIHZcclxuICB9XHJcbiAgaWYgKGwgIT09IGEpIGRlZi5zZXQgPSBmdW5jdGlvbih2KXtcclxuICAgIHYgPSBvICYmIG8uc2V0ID8gby5zZXQodikgOiB2XHJcbiAgICB2ID0gbyAmJiBvLnRvU3RyaW5nID8gby50b1N0cmluZyh2KSA6IHZcclxuICAgIHZhbHVlID0gdlxyXG4gIH1cclxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsIG4sIGRlZilcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZXh0OiBmdW5jdGlvbihsKSB7XHJcbiAgICBmb3IgKHZhciBuIGluIGEub3B0aW9ucykgYS5jcmVhdGVPcHRpb24obCwgbilcclxuICB9XHJcbn1cclxuIiwiY29uc29sZS5pbmZvKCd1bG9nOmxldmVscycpXHJcblxyXG52YXIgYSA9IHJlcXVpcmUoJy4vY29yZScpXHJcblxyXG5hLmFkZCgnb3B0aW9ucycsIHtcclxuICAvLyBsZXZlbCBvcHRpb25cclxuICAvL1xyXG4gIC8vIGRlZmF1bHRzIHRvICdJTkZPJyAoTm9kZSkgb3IgJ1dBUk4nIChicm93c2VycylcclxuICAvLyBtYXkgY29udGFpbiBtdWx0aXBsZSBleHByZXNzaW9uPXNldHRpbmcgcGFpcnMgc2VwYXJhdGVkIGJ5IHNlbWljb2xvbnNcclxuICAvLyBlLmcuICdXQVJOJyBvciAnaW5mbzsgbXktbW9kdWxlPWRlYnVnJywgZXRjLlxyXG4gIC8vIGlmIG5vIGV4cHJlc3Npb24gaXMgbGlzdGVkLCB0aGUgd2lsZGNhcmQgKCopIGlzIGltcGxpZWQuXHJcbiAgLy8gdGhlIHNldHRpbmcgaXMgYSBsb2cgbGV2ZWwsIHN1Y2ggYXMgJ3dhcm4nLCAnRVJST1InIG9yICdpbmZvJ1xyXG4gIC8vIHNlZSBhbHNvIGB1bG9nLmxldmVsc2BcclxuICBsZXZlbDoge1xyXG4gICAgLy8gbGV2ZWwgbnVtYmVyIGZyb20gc3RyaW5nXHJcbiAgICBmcm9tU3RyaW5nOiBmdW5jdGlvbih2KSB7XHJcbiAgICAgIHJldHVybiAodiAhPT0gdW5kZWZpbmVkKSAmJiAoTnVtYmVyKHYpIT09TnVtYmVyKHYpIFxyXG4gICAgICAgID8gYS5sZXZlbHNbdi50b0xvd2VyQ2FzZSgpXSBcclxuICAgICAgICA6IE51bWJlcih2KVxyXG4gICAgICApXHJcbiAgICB9LFxyXG4gICAgLy8gbGV2ZWwgbnVtYmVyIHRvIHN0cmluZ1xyXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKHYpIHtcclxuICAgICAgZm9yICh4IGluIGEubGV2ZWxzKVxyXG4gICAgICAgIGlmIChhLmxldmVsc1t4XSA9PT0gdilcclxuICAgICAgICAgIHJldHVybiB4LnRvVXBwZXJDYXNlKClcclxuICAgIH0sXHJcbiAgICAvLyBnZXR0ZXIgZXh0ZW5zaW9uXHJcbiAgICBnZXQ6IGZ1bmN0aW9uKGwsdil7XHJcbiAgICAgIHJldHVybiBNYXRoLm1heChhLmVuYWJsZWQobCkgJiYgbC5ERUJVRyB8fCBsLk5PTkUsIHYpXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZXh0OiBmdW5jdGlvbihsKSB7XHJcbiAgICBsLk5PTkUgPSAwXHJcbiAgICBsLkFMTCA9IDkwMDcxOTkyNTQ3NDA5OTEgLy8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcclxuICAgIGZvciAodmFyIHYgaW4gYS5sZXZlbHMpIHtcclxuICAgICAgbFt2LnRvVXBwZXJDYXNlKCldID0gYS5sZXZlbHNbdl1cclxuICAgICAgaWYgKGwgIT0gYSAmJiAobC5sZXZlbCA8IGEubGV2ZWxzW3ZdKSkgbFt2XSA9IGZ1bmN0aW9uIG5vb3AoKXt9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsInZhciBhID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvcmUnKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZXh0OiBmdW5jdGlvbihsKSB7XHJcbiAgICBpZiAobCAhPSBhKSB7XHJcbiAgICAgIGwuYXNzZXJ0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICB2YXIgYT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcclxuICAgICAgICBpZiAoIWEuc2hpZnQoKSkgbC5lcnJvci5hcHBseShsLCBhKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==